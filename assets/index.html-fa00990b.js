import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as i,f as l,a as n,b as s,d as e,e as p}from"./app-1596d3c0.js";const r="/assets/2023-04-14-18-22-04-1346159d.png",d="/assets/2023-04-14-18-48-04-5bce8e61.png",u="/assets/2023-04-14-18-48-21-7e17d7cb.png",k={},v=n("p",null,[s("最近维护的Air001准备上线了，为了衬托出其强大的性价比，因此我想来做点"),n("s",null,"缺德"),s("的事，让我们来和同样以高打性价比的STC系列单片机来对比下CoreMark的跑分吧，本文将会详细介绍移植过程以及跑分结果。测试的MCU为"),n("code",null,"降龙棍 STC32G12K128"),s("与"),n("code",null,"打狗棒 STC8H8K64U"),s("。")],-1),m=p('<h2 id="stc32g12k128" tabindex="-1"><a class="header-anchor" href="#stc32g12k128" aria-hidden="true">#</a> STC32G12K128</h2><h3 id="开启usb-cdc打印log" tabindex="-1"><a class="header-anchor" href="#开启usb-cdc打印log" aria-hidden="true">#</a> 开启USB-CDC打印Log</h3><p>我买到的降龙棍开发板非常的HiFi，整个板子上外设除了LED和芯片就没什么了，下载程序都是用的自带的USB-HID的bootloader，然后我又懒得接一个串口模块，因此我们可不可以利用原生的USB，走CDC虚拟串口来打印跑分后的数据呢？</p><p>答案当然是肯定的，STC非常的贴心，自带了一个写好的USB库，其中包含了HID和CDC两类主要的操作。那我们就先尝试去移植吧。</p><h4 id="下载库文件" tabindex="-1"><a class="header-anchor" href="#下载库文件" aria-hidden="true">#</a> 下载库文件</h4>',5),h={href:"https://stcai.com/filedownload/656048",target:"_blank",rel:"noopener noreferrer"},b=p(`<h4 id="创建工程" tabindex="-1"><a class="header-anchor" href="#创建工程" aria-hidden="true">#</a> 创建工程</h4><p>打开Keil，新建一个工程，芯片选择<code>STC32G12K128</code>，然后我们复制刚才解压的文件中的<code>stc32_stc8_usb.h</code>和<code>stc_usb_cdc_32g.lib</code>到我们新建的工程的目录下，并添加进自己的工程中。</p><h4 id="编写初始化代码" tabindex="-1"><a class="header-anchor" href="#编写初始化代码" aria-hidden="true">#</a> 编写初始化代码</h4><p>我们在main.c中添加如下的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stc32g.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stc32_stc8_usb.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;STC32G_Delay.h&quot;</span></span>

<span class="token keyword">char</span> <span class="token operator">*</span>USER_DEVICEDESC <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>USER_PRODUCTDESC <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>USER_STCISPCMD <span class="token operator">=</span> <span class="token string">&quot;@STCISP#&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 不停电自动 ISP 下载命令</span>

<span class="token keyword">void</span> <span class="token function">CDC_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> helloStr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World!\\r\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CDC_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    IE2 <span class="token operator">|=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token comment">// 使能 USB 中断</span>
    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>DeviceState <span class="token operator">!=</span> DEVSTATE_CONFIGURED<span class="token punctuation">)</span>
        <span class="token punctuation">;</span> <span class="token comment">// 等待 USB 完成配置</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">USB_SendData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BYTE <span class="token operator">*</span><span class="token punctuation">)</span>helloStr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>helloStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CDC_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    P_SW2 <span class="token operator">|=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>
    P3M0 <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x03</span><span class="token punctuation">;</span>   <span class="token comment">// P3.0/P3.1 和 USB 的 D-/D+共用 PIN 脚，</span>
    P3M1 <span class="token operator">|=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>    <span class="token comment">// 需要将 P3.0/P3.1 设置为高阻输入模式</span>
    IRC48MCR <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token comment">// 使能内部 48M 的 USB 专用 IRC</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>IRC48MCR <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
    USBCLK <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span> <span class="token comment">// 设置 USB 时钟源为内部 48M 的 USB 专用 IRC</span>
    USBCON <span class="token operator">=</span> <span class="token number">0x90</span><span class="token punctuation">;</span> <span class="token comment">// 使能 USB 功能</span>
    <span class="token function">usb_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用 USB CDC 初始化库函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可能需要注意的是，您需要修改keil中的<code>Memory Mode</code>，将其修改为<code>XSmall</code>，<code>Code ROM Size</code>修改为<code>Large</code></p></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后编译，发现0 Warning，0 Error，我们下载之后打开串口助手，此时应该能看到每隔一分钟打印一次<code>Hello World!</code>。</p><h3 id="移植coremark" tabindex="-1"><a class="header-anchor" href="#移植coremark" aria-hidden="true">#</a> 移植CoreMark</h3><h4 id="下载coremark库" tabindex="-1"><a class="header-anchor" href="#下载coremark库" aria-hidden="true">#</a> 下载CoreMark库</h4><p>我们在工程目录下克隆整个仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/eembc/coremark.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="在keil中加入所需的文件" tabindex="-1"><a class="header-anchor" href="#在keil中加入所需的文件" aria-hidden="true">#</a> 在Keil中加入所需的文件</h4><p>在工程中，加入如下几个文件：<code>core_list_join.c</code> <code>core_main.c</code> <code>core_matrix.c</code> <code>core_state.c</code> <code>core_util.c</code> s<code>simple/core_portme.c</code>，不要忘记把添加include路径<br><img src="`+d+'" alt="" loading="lazy"><br><img src="'+u+`" alt="" loading="lazy"></p><h4 id="修改coremark的具体实现函数" tabindex="-1"><a class="header-anchor" href="#修改coremark的具体实现函数" aria-hidden="true">#</a> 修改CoreMark的具体实现函数</h4><h5 id="_0x01-修改coremark的main函数" tabindex="-1"><a class="header-anchor" href="#_0x01-修改coremark的main函数" aria-hidden="true">#</a> 0x01 修改coremark的main函数</h5><p>首先打开<code>core_main.c</code>文件，将里面的<code>MAIN_RETURN_TYPE main(int argc, char *argv[])</code>函数重命名为</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">MAIN_HAS_NOARGC</span></span>
MAIN_RETURN_TYPE
<span class="token function">coremark_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span>   argc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
MAIN_RETURN_TYPE
<span class="token function">coremark_main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在<code>coremark.h</code>中添加</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">MAIN_HAS_NOARGC</span></span>
MAIN_RETURN_TYPE
<span class="token function">coremark_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
MAIN_RETURN_TYPE
<span class="token function">coremark_main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数声明，这里是为了解决main函数重复的问题，而我们想要在运行正式的程序之前初始化一些我们自己的外设。</p><h5 id="_0x02-添加ee-printf函数" tabindex="-1"><a class="header-anchor" href="#_0x02-添加ee-printf函数" aria-hidden="true">#</a> 0x02 添加<code>ee_printf</code>函数</h5><p>这里我们没法直接使用printf函数输出，因此选择自己写一个<code>ee_printf</code>函数将运行结果输出。我们打开<code>core_portme.h</code>文件，将<code>HAS_PRINTF</code>的值设定为0，并在文件末尾添加<code>ee_printf</code>的函数定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HAS_PRINTF</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAS_PRINTF</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ee_printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们在<code>simple</code>文件夹下新建一个<code>ee_printf.c</code>文件，在里面写上<code>ee_printf</code>函数的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;coremark.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stc32_stc8_usb.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">ee_printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len<span class="token punctuation">;</span>
    va_list args<span class="token punctuation">;</span>

    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    len <span class="token operator">=</span> <span class="token function">vsprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">USB_SendData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BYTE <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_0x03-添加时钟" tabindex="-1"><a class="header-anchor" href="#_0x03-添加时钟" aria-hidden="true">#</a> 0x03 添加时钟</h5><p>接下来我们需要一个时钟源来判断程序运行了多久，显然这很容易。我们采用定时器0作为时钟源，1ms中断一次来进行计数。我们将引入STC标准库中的<code>STC32G_Timer</code>与<code>STC32G_NVIC</code>，如何添加到工程中不多赘述，初始化等操作也不多赘述，具体可以自行到仓库中查看源代码。此处我们只需要指定，每经过1ms，SysTickFlag将会自增1即可。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要注意，请记得在<code>STC32G_Timer_Isr.c</code>中修改中断函数</p></div><p>同样的，在<code>core_portme.h</code>文件中，将<code>HAS_TIME_H</code>和<code>USE_CLOCK</code>的宏定义修改为0，并注释掉<code>#include &lt;time.h&gt;</code>，将<code>CORE_TICKS</code>的类型修改为<code>long</code>。</p><p>然后我们进入到<code>simple/core_portme.c</code>文件中，重点重写<code>GETMYTIME</code>等几个宏，我们将其注释，并替换为如下的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Type_def.h&quot;</span></span>
<span class="token keyword">extern</span> <span class="token keyword">volatile</span> u32 SysTickFlag<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NSECS_PER_SEC</span>              <span class="token expression"><span class="token number">1000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CORETIMETYPE</span>               <span class="token expression"><span class="token keyword">long</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GETMYTIME</span><span class="token expression"><span class="token punctuation">(</span>_t<span class="token punctuation">)</span>              <span class="token punctuation">(</span><span class="token operator">*</span>_t <span class="token operator">=</span> SysTickFlag<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MYTIMEDIFF</span><span class="token expression"><span class="token punctuation">(</span>fin<span class="token punctuation">,</span> ini<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span>fin<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>ini<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIMER_RES_DIVIDER</span>          <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SAMPLE_TIME_IMPLEMENTATION</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EE_TICKS_PER_SEC</span>           <span class="token expression"><span class="token punctuation">(</span>NSECS_PER_SEC <span class="token operator">/</span> TIMER_RES_DIVIDER<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请注意，这时候编译器可能会有很多报错，是因为和关键字重复了，建议查看commit记录查看修改了什么</p></div><h4 id="烧录" tabindex="-1"><a class="header-anchor" href="#烧录" aria-hidden="true">#</a> 烧录</h4><p>使用STC-ISP软件烧录，其中IRC频率修改为最高35M，等待烧录后打开串口查看跑分结果。</p>`,36),_={class:"hint-container tip"},g=n("p",{class:"hint-container-title"},"提示",-1),f={href:"https://github.com/HalfSweet/STC32G-CoreMark",target:"_blank",rel:"noopener noreferrer"};function y(S,C){const a=c("ExternalLinkIcon");return o(),i("div",null,[v,l(" more "),m,n("p",null,[s("STC的USB库文件下载链接为"),n("a",h,[s("https://stcai.com/filedownload/656048"),e(a)]),s("，下载后会发现是一个压缩文件，我们将其解压备用。")]),b,n("div",_,[g,n("p",null,[s("STC32的CoreMark跑分工程开源仓库为"),n("a",f,[s("https://github.com/HalfSweet/STC32G-CoreMark"),e(a)])])])])}const E=t(k,[["render",y],["__file","index.html.vue"]]);export{E as default};
