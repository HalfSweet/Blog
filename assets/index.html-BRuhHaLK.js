import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as c,c as o,a as s,b as n,d as p,e as i}from"./app-RyZaYp95.js";const l="/assets/2023-08-20-20-27-46-DGEiYCHO.png",u="/assets/2023-08-20-20-36-26-CO_nFz98.png",r="/assets/2023-08-20-20-37-09-BKnAVdzf.png",k="/assets/2023-08-20-20-55-58-DhKtKWYq.png",d="/assets/2023-08-20-20-56-16-CzydazCE.png",m="/assets/2023-08-20-20-59-08-CCOy-H3h.png",v="/assets/2023-08-20-21-04-35-DlLrU9VC.png",b={},C=i('<p>最近打算把 Air32 也吃上 Arduino，发挥全部性能，就不用像是 Air001 那样束手束脚了，但是问题是 Arduino 的库是基于 HAL 的，那要用上 Arduino 就必定得先适配 HAL 库，那我们就来先尝试在 HAL 下让 Air32 跑到最高主频吧。</p><h2 id="初始化工程" tabindex="-1"><a class="header-anchor" href="#初始化工程"><span>初始化工程</span></a></h2><p>首先我们需要先初始化一个工程，就单纯点灯和和串口打印，这里我偷懒用了<code>STM32CubeMX</code>，我们勾上串口和外部时钟，为了方便我们顺便把 SWD 也选上。大概就是这样</p><figure><img src="'+l+`" alt="CubeMX" tabindex="0" loading="lazy"><figcaption>CubeMX</figcaption></figure><p>然后生成代码即可。</p><h2 id="修改时钟" tabindex="-1"><a class="header-anchor" href="#修改时钟"><span>修改时钟</span></a></h2><p>因为我们要跑高主频，原先的 PLL 倍频数不满足，用到了新的一些配置，因此我们需要修改芯片头文件以及<code>hal_rcc_ex.h</code>中的一些宏定义，首先是芯片的头文件，我们这里以<code>air32f103xb.h</code>为例，我们需要修改的地方如下</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL16_Pos</span>               <span class="token expression"><span class="token punctuation">(</span><span class="token number">19U</span><span class="token punctuation">)</span>                             </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL16_Msk</span>               <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x7UL</span> <span class="token operator">&lt;&lt;</span> RCC_CFGR_PLLMULL16_Pos<span class="token punctuation">)</span>  </span><span class="token comment">/*!&lt; 0x00380000 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL16</span>                   <span class="token expression">RCC_CFGR_PLLMULL16_Msk            </span><span class="token comment">/*!&lt; PLL input clock*16 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL17</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10000000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL18</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10040000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL19</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10080000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL20</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x100C0000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL21</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10100000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL22</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10140000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL23</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10180000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL24</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x101C0000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL25</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10200000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL26</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10240000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL27</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10280000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL28</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x102C0000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL29</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10300000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL30</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10340000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL31</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x10380000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_CFGR_PLLMULL32</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">0x103C0000</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后是<code>air32f1xx_hal_rcc_ex.h</code>，我们需要修改的地方如下</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL17</span>                   <span class="token expression">RCC_CFGR_PLLMULL17</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL18</span>                   <span class="token expression">RCC_CFGR_PLLMULL18</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL19</span>                   <span class="token expression">RCC_CFGR_PLLMULL19</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL20</span>                   <span class="token expression">RCC_CFGR_PLLMULL20</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL21</span>                   <span class="token expression">RCC_CFGR_PLLMULL21</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL22</span>                   <span class="token expression">RCC_CFGR_PLLMULL22</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL23</span>                   <span class="token expression">RCC_CFGR_PLLMULL23</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL24</span>                   <span class="token expression">RCC_CFGR_PLLMULL24</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL25</span>                   <span class="token expression">RCC_CFGR_PLLMULL25</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL26</span>                   <span class="token expression">RCC_CFGR_PLLMULL26</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL27</span>                   <span class="token expression">RCC_CFGR_PLLMULL27</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL28</span>                   <span class="token expression">RCC_CFGR_PLLMULL28</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL29</span>                   <span class="token expression">RCC_CFGR_PLLMULL29</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL30</span>                   <span class="token expression">RCC_CFGR_PLLMULL30</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL31</span>                   <span class="token expression">RCC_CFGR_PLLMULL31</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_PLL_MUL32</span>                   <span class="token expression">RCC_CFGR_PLLMULL32</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后修改<code>main.c</code>中的<code>SystemClock_Config</code>函数，把 PLL 的倍频修改为<code>RCC_PLL_MUL32</code>，这样就可以跑到 256M 了。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>  RCC_OscInitTypeDef RCC_OscInitStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  RCC_ClkInitTypeDef RCC_ClkInitStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */</span>
  RCC_OscInitStruct<span class="token punctuation">.</span>OscillatorType <span class="token operator">=</span> RCC_OSCILLATORTYPE_HSE<span class="token punctuation">;</span>
  RCC_OscInitStruct<span class="token punctuation">.</span>HSEState <span class="token operator">=</span> RCC_HSE_ON<span class="token punctuation">;</span>
  RCC_OscInitStruct<span class="token punctuation">.</span>HSEPredivValue <span class="token operator">=</span> RCC_HSE_PREDIV_DIV1<span class="token punctuation">;</span>
  RCC_OscInitStruct<span class="token punctuation">.</span>HSIState <span class="token operator">=</span> RCC_HSI_ON<span class="token punctuation">;</span>
  RCC_OscInitStruct<span class="token punctuation">.</span>PLL<span class="token punctuation">.</span>PLLState <span class="token operator">=</span> RCC_PLL_ON<span class="token punctuation">;</span>
  RCC_OscInitStruct<span class="token punctuation">.</span>PLL<span class="token punctuation">.</span>PLLSource <span class="token operator">=</span> RCC_PLLSOURCE_HSE<span class="token punctuation">;</span>
  RCC_OscInitStruct<span class="token punctuation">.</span>PLL<span class="token punctuation">.</span>PLLMUL <span class="token operator">=</span> RCC_PLL_MUL32<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_RCC_OscConfig</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>RCC_OscInitStruct<span class="token punctuation">)</span> <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/** Initializes the CPU, AHB and APB buses clocks
  */</span>
  RCC_ClkInitStruct<span class="token punctuation">.</span>ClockType <span class="token operator">=</span> RCC_CLOCKTYPE_HCLK<span class="token operator">|</span>RCC_CLOCKTYPE_SYSCLK
                              <span class="token operator">|</span>RCC_CLOCKTYPE_PCLK1<span class="token operator">|</span>RCC_CLOCKTYPE_PCLK2<span class="token punctuation">;</span>
  RCC_ClkInitStruct<span class="token punctuation">.</span>SYSCLKSource <span class="token operator">=</span> RCC_SYSCLKSOURCE_PLLCLK<span class="token punctuation">;</span>
  RCC_ClkInitStruct<span class="token punctuation">.</span>AHBCLKDivider <span class="token operator">=</span> RCC_SYSCLK_DIV1<span class="token punctuation">;</span>
  RCC_ClkInitStruct<span class="token punctuation">.</span>APB1CLKDivider <span class="token operator">=</span> RCC_HCLK_DIV2<span class="token punctuation">;</span>
  RCC_ClkInitStruct<span class="token punctuation">.</span>APB2CLKDivider <span class="token operator">=</span> RCC_HCLK_DIV1<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_RCC_ClockConfig</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>RCC_ClkInitStruct<span class="token punctuation">,</span> FLASH_LATENCY_2<span class="token punctuation">)</span> <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是事情远没有那么简单，Air32 作为典型的国产 MCU，那必然是存在很多暗坑，我们查看提供的标准库的 RCC 例程，发现需要进行一个“解锁”操作。那我们依葫芦画瓢，在<code>air32f1xx_hal_rcc.c</code>中的<code>HAL_RCC_OscConfig</code>函数中 728 行左右添加这么几段：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>          <span class="token comment">/* Set PREDIV1 Value */</span>
          RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">=</span> <span class="token punctuation">(</span>RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x00030000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">__HAL_RCC_HSE_PREDIV_CONFIG</span><span class="token punctuation">(</span>RCC_OscInitStruct<span class="token operator">-&gt;</span>HSEPredivValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/* Configure the main PLL clock source and multiplication factors. */</span>
        <span class="token comment">/* __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct-&gt;PLL.PLLSource,
                             RCC_OscInitStruct-&gt;PLL.PLLMUL); */</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x400210F0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//开启 sys_cfg 门控</span>
	    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x40016C00</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xa7d93a86</span><span class="token punctuation">;</span><span class="token comment">//解一、二、三级锁</span>
	    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x40016C00</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xab12dfcd</span><span class="token punctuation">;</span>
	    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x40016C00</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xcded3526</span><span class="token punctuation">;</span>
	    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x4002228C</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xa5a5a5a5</span><span class="token punctuation">;</span><span class="token comment">//QSPI 解锁</span>

        <span class="token comment">// 默认 Flash 读取等待时间为 2 个 CPU 周期</span>
        <span class="token function">AIR32F1_SysFreq_Set</span><span class="token punctuation">(</span>RCC_OscInitStruct<span class="token operator">-&gt;</span>PLL<span class="token punctuation">.</span>PLLMUL<span class="token punctuation">,</span>FLASH_Div_2 <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        RCC<span class="token operator">-&gt;</span>CFGR <span class="token operator">|=</span> RCC_OscInitStruct<span class="token operator">-&gt;</span>PLL<span class="token punctuation">.</span>PLLSource<span class="token punctuation">;</span>

        <span class="token comment">//恢复配置前状态</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x400210F0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//开启 sys_cfg 门控</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x40016C00</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0xa7d93a86</span><span class="token punctuation">;</span><span class="token comment">//加一、二、三级锁</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x40016C00</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0xab12dfcd</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x40016C00</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0xcded3526</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x4002228C</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0xa5a5a5a5</span><span class="token punctuation">;</span><span class="token comment">//QSPI 解锁</span>

        <span class="token comment">/* Enable the main PLL. */</span>
        <span class="token function">__HAL_RCC_PLL_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，<code>AIR32F1_SysFreq_Set</code>是一个自定义的宏，其原型是</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>AIR32F1_SysFreq_Set_FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">,</span> FlashClkDiv<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AIR32F1_SysFreq_Set</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AIR32F1_SysFreq_Set_FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1FFFD00C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的<code>FlashClkDiv</code>类型是</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> 
<span class="token punctuation">{</span>
	FLASH_Div_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
	FLASH_Div_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
	FLASH_Div_4 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
	FLASH_Div_6 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
	FLASH_Div_8 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
	FLASH_Div_16 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>FlashClkDiv<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这俩随便放在哪都好，我就放到了<code>air32f1xx_hal_rcc_ex.h</code>中了。</p><p>需要注意的是，<code>AIR32F1_SysFreq_Set</code>这个函数本身就很魔法…其实现是固化在了芯片中，我们将<code>0x1FFFD00C</code>这个地址强转为函数指针，然后再传入，以及那些奇奇怪怪的地址都是直接写的手册上没有的寄存器地址，至于具体是什么，我也希腊奶，反正就是这么用的。</p><h2 id="修改hal-rcc-getsysclockfreq" tabindex="-1"><a class="header-anchor" href="#修改hal-rcc-getsysclockfreq"><span>修改<code>HAL_RCC_GetSysClockFreq</code></span></a></h2><p>现在我们可以成功拉高主频了，但是 HAL 库内部用的<code>HAL_RCC_GetSysClockFreq</code>函数来获取主频，如果主频不对那其它外设的分频也会出问题，最典型的就是串口输出乱码。</p><p>我们查看 Air32 的参考手册，发现与 STM32 相比，其 PLL 的倍频寄存器是 5 个 bit，比 STM32 多一个 bit，但是很难受的是多的那个 bit 是在高位且和其它的不连续。</p><figure><img src="`+k+'" alt="Air32" tabindex="0" loading="lazy"><figcaption>Air32</figcaption></figure><figure><img src="'+d+`" alt="STM32" tabindex="0" loading="lazy"><figcaption>STM32</figcaption></figure><p>因此我们需要单独判断这个 bit，如果为 0 的情况下和 STM32 的行为一致，如果为 1 的情况下，我们需要手动转换一下。</p><p>首先我们修改<code>aPLLMULFactorTable</code>数组，把缺失的几个倍频值补上。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>RCC_CFGR2_PREDIV1SRC<span class="token punctuation">)</span></span></span>
  <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> aPLLMULFactorTable<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> aPredivFactorTable<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> aPLLMULFactorTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span>
  <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>RCC_CFGR2_PREDIV1<span class="token punctuation">)</span></span></span>
  <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> aPredivFactorTable<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> aPredivFactorTable<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/*RCC_CFGR2_PREDIV1*/</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们稍微修改下计算倍频的代码，在大约 1134 行的地方修改为</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>    <span class="token keyword">case</span> RCC_SYSCLKSOURCE_STATUS_PLLCLK<span class="token operator">:</span>  <span class="token comment">/* PLL used as system clock */</span>
    <span class="token punctuation">{</span>
      <span class="token class-name">uint32_t</span> pllMul4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// PLL MUL 的第 5 个字节</span>
      pllMul4 <span class="token operator">=</span> tmpreg <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>pllMul4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        pllmul <span class="token operator">=</span> aPLLMULFactorTable<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tmpreg <span class="token operator">&amp;</span> RCC_CFGR_PLLMULL<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> RCC_CFGR_PLLMULL_Pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span>
      <span class="token punctuation">{</span>
        pllmul <span class="token operator">=</span> aPLLMULFactorTable<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tmpreg <span class="token operator">&amp;</span> RCC_CFGR_PLLMULL<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> RCC_CFGR_PLLMULL_Pos<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="修改串口分频定义宏" tabindex="-1"><a class="header-anchor" href="#修改串口分频定义宏"><span>修改串口分频定义宏</span></a></h2><p>此时理论上来说已经可以正常工作，但是我们会发现串口输出还是乱码，这是因为 HAL 库中串口的分频计算可能会溢出。我们打开<code>air32f1xx_hal_uart.h</code>中的第 839 行，把原来的</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UART_DIV_SAMPLING16</span><span class="token expression"><span class="token punctuation">(</span>_PCLK_<span class="token punctuation">,</span> _BAUD_<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_PCLK_<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">25U</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">4U</span><span class="token operator">*</span><span class="token punctuation">(</span>_BAUD_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改为</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">UART_DIV_SAMPLING16</span><span class="token expression"><span class="token punctuation">(</span>_PCLK_<span class="token punctuation">,</span> _BAUD_<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>_PCLK_<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">4U</span><span class="token operator">*</span><span class="token punctuation">(</span>_BAUD_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">25U</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此，HAL 库需要修改的内容已经完成。</p><h2 id="添加-printf-输出" tabindex="-1"><a class="header-anchor" href="#添加-printf-输出"><span>添加 Printf 输出</span></a></h2><p>为了避免原生的 Printf 问题，我们自己定义一个<code>MyPrintf</code>函数，其定义如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    va_list args<span class="token punctuation">;</span>
    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们在主函数中添加输出主频的相关代码：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN 1 */</span>

  <span class="token comment">/* USER CODE END 1 */</span>

  <span class="token comment">/* MCU Configuration--------------------------------------------------------*/</span>

  <span class="token comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
  <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN Init */</span>

  <span class="token comment">/* USER CODE END Init */</span>

  <span class="token comment">/* Configure the system clock */</span>
  <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN SysInit */</span>

  <span class="token comment">/* USER CODE END SysInit */</span>

  <span class="token comment">/* Initialize all configured peripherals */</span>
  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 2 */</span>
  <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
    <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token string">&quot;SystemCoreClock: %d Hz\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">HAL_RCC_GetSysClockFreq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE END 3 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译下载，打开串口调试助手，可以观察到：</p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>串口输出无乱码，主频正确，我们已经成功在 HAL 中跑到了最高主频。</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2>',48),L={href:"https://github.com/Air-duino/Air32F103-HAL-RCC",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/Air-duino/Arduino-Air32F103-Drivers",target:"_blank",rel:"noopener noreferrer"};function h(R,f){const a=t("ExternalLinkIcon");return c(),o("div",null,[C,s("p",null,[n("本文的工程开源在"),s("a",L,[n("https://github.com/Air-duino/Air32F103-HAL-RCC"),p(a)]),n("，用到的 HAL 库源码在"),s("a",_,[n("https://github.com/Air-duino/Arduino-Air32F103-Drivers"),p(a)]),n("。")])])}const P=e(b,[["render",h],["__file","index.html.vue"]]),x=JSON.parse(`{"path":"/posts/Air32-HAL-HighFreq/","title":"发挥全部实力！Air32 在 HAL 库环境下运行最高主频","lang":"zh-CN","frontmatter":{"title":"发挥全部实力！Air32 在 HAL 库环境下运行最高主频","date":"2023-08-20T20:30:00.000Z","permalink":"/posts/Air32-HAL-HighFreq/","category":["单片机"],"tag":["Air32","合宙","超频"],"author":{"name":"HalfSweet","link":"https://github.com/HalfSweet"},"description":"最近打算把 Air32 也吃上 Arduino，发挥全部性能，就不用像是 Air001 那样束手束脚了，但是问题是 Arduino 的库是基于 HAL 的，那要用上 Arduino 就必定得先适配 HAL 库，那我们就来先尝试在 HAL 下让 Air32 跑到最高主频吧。 初始化工程 首先我们需要先初始化一个工程，就单纯点灯和和串口打印，这里我偷懒用了...","head":[["meta",{"property":"og:url","content":"https://halfsweet.cn/posts/Air32-HAL-HighFreq/"}],["meta",{"property":"og:site_name","content":"HalfSweet's Blog"}],["meta",{"property":"og:title","content":"发挥全部实力！Air32 在 HAL 库环境下运行最高主频"}],["meta",{"property":"og:description","content":"最近打算把 Air32 也吃上 Arduino，发挥全部性能，就不用像是 Air001 那样束手束脚了，但是问题是 Arduino 的库是基于 HAL 的，那要用上 Arduino 就必定得先适配 HAL 库，那我们就来先尝试在 HAL 下让 Air32 跑到最高主频吧。 初始化工程 首先我们需要先初始化一个工程，就单纯点灯和和串口打印，这里我偷懒用了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T06:35:02.000Z"}],["meta",{"property":"article:author","content":"HalfSweet"}],["meta",{"property":"article:tag","content":"Air32"}],["meta",{"property":"article:tag","content":"合宙"}],["meta",{"property":"article:tag","content":"超频"}],["meta",{"property":"article:published_time","content":"2023-08-20T20:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-23T06:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发挥全部实力！Air32 在 HAL 库环境下运行最高主频\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-20T20:30:00.000Z\\",\\"dateModified\\":\\"2024-03-23T06:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HalfSweet\\",\\"link\\":\\"https://github.com/HalfSweet\\"}]}"]]},"headers":[{"level":2,"title":"初始化工程","slug":"初始化工程","link":"#初始化工程","children":[]},{"level":2,"title":"修改时钟","slug":"修改时钟","link":"#修改时钟","children":[]},{"level":2,"title":"修改HAL_RCC_GetSysClockFreq","slug":"修改hal-rcc-getsysclockfreq","link":"#修改hal-rcc-getsysclockfreq","children":[]},{"level":2,"title":"修改串口分频定义宏","slug":"修改串口分频定义宏","link":"#修改串口分频定义宏","children":[]},{"level":2,"title":"添加 Printf 输出","slug":"添加-printf-输出","link":"#添加-printf-输出","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[]}],"git":{"createdTime":1692536781000,"updatedTime":1711175702000,"contributors":[{"name":"HalfSweet","email":"halfsweet@halfsweet.cn","commits":4}]},"readingTime":{"minutes":5.78,"words":1733},"filePathRelative":"posts/发挥全部实力！Air32在HAL库环境下运行最高主频.md","localizedDate":"2023年8月20日","excerpt":"<p>最近打算把 Air32 也吃上 Arduino，发挥全部性能，就不用像是 Air001 那样束手束脚了，但是问题是 Arduino 的库是基于 HAL 的，那要用上 Arduino 就必定得先适配 HAL 库，那我们就来先尝试在 HAL 下让 Air32 跑到最高主频吧。</p>\\n","autoDesc":true}`);export{P as comp,x as data};
