import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as i,f as l,a as n,b as s,d as t,e}from"./app-CyNvHrTn.js";const u="/assets/Screenshot1-gFEd_8ov.png",r="/assets/Screenshot2-DeQiTexZ.png",d="/assets/Screenshot3-BnKgc_vY.png",k="/assets/Screenshot4-8-F-rED9.png",m={},v=n("p",null,[s("众所周知，在c++20以上的标准已经支持了"),n("code",null,"std::format"),s("进行格式化输出，不过显而易见，嵌入式领域想要得到支持显然遥遥无期。但是我们已经厌倦了使用sprintf等方式来格式化字符串，c++的流特性又显得不够优雅，怎么才能用上类似于Python中format这样的方式来格式化并输出想要的字符串呢。")],-1),b={href:"https://fmt.dev/latest/index.html#portability",target:"_blank",rel:"noopener noreferrer"},f=e(`<h2 id="platformio平台" tabindex="-1"><a class="header-anchor" href="#platformio平台" aria-hidden="true">#</a> PlatformIO平台</h2><h3 id="使用arduino作为框架" tabindex="-1"><a class="header-anchor" href="#使用arduino作为框架" aria-hidden="true">#</a> 使用Arduino作为框架</h3><h4 id="esp8266芯片" tabindex="-1"><a class="header-anchor" href="#esp8266芯片" aria-hidden="true">#</a> ESP8266芯片</h4><h5 id="移植-fmt-库" tabindex="-1"><a class="header-anchor" href="#移植-fmt-库" aria-hidden="true">#</a> 移植{fmt}库</h5><p>首先我们下载fmtlib的包，这里我们使用了最新的版本（9.1.0），下载完成之后将其解压到工程目录下的/lib/文件夹中。不过解压好之后不能直接使用，因为在PlatformIO平台下，所以我们需要先在fmtlib库的根目录下添加一个<code>library.json</code>文件。这里我们可以参考下面的书写方式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fmt&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{fmt} is an open-source formatting library providing a fast and safe alternative to C stdio and C++ iostreams.&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c-plus-plus, performance, cross-platform, formatting, printf, output, multiplatform, chrono&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;9.1.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;repository&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/fmtlib/fmt&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;homepage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://fmt.dev&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;frameworks&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;platforms&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;srcFilter&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;+&lt;*&gt;&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;-&lt;fmt.cc&gt;&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;-&lt;os.cc&gt;&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完成之后我们就可以使用这个库了，在<code>main.cpp</code>文件中<code>include &lt;fmt/core.h&gt;</code>即可使用。这里我们给一段小小的例程：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fmt/core.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// put your setup code here, to run once:</span>
    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">74880</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string str1 <span class="token operator">=</span> fmt<span class="token double-colon punctuation">::</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, fmtlib.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string str2 <span class="token operator">=</span> fmt<span class="token double-colon punctuation">::</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;The answer is {}.&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// put your main code here, to run repeatedly:</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是！编译器显然不满我们这样的NTR行为，很快啊，一下子抛出了好几个error：<br><img src="`+u+'" alt="" loading="lazy"><br> 这样的报错多少有些驴唇不对马嘴了，怎么回事呢，我百思不得其解。首先进入到了<code>core.h</code>文件下仔细看看，却发现在<code>B1</code>这个字符上的高亮有些不对劲，<code>Alt+F12</code>一看好家伙不得了。<br><img src="'+r+'" alt="" loading="lazy"><br> 看起来开发者是想要在没有<code>0bxxxxxxxx</code>的时候兼容写了一个能表示二进制的宏，但是未免有些过于暴力，并且刚好于<code>B1</code>这个字符重复了……</p><p>解决方法也很简单，我们修改一下字符即可，把<code>B1</code>的字符全部替换为了<code>_B1</code>。</p><p>然后是<code>format.h</code>文件，这里面的问题也是类似的，<code>F()</code>竟然也是一个宏……修改方式类似，把所有的<code>F</code>字符替换为了<code>_F</code>即可。</p><p>重新编译，发现没有报错，问题解决。上传到开发板之后，观察串口输出：<br><img src="'+d+'" alt="" loading="lazy"></p><h5 id="重定向stdout-用来直接使用fmt-print" tabindex="-1"><a class="header-anchor" href="#重定向stdout-用来直接使用fmt-print" aria-hidden="true">#</a> 重定向stdout，用来直接使用fmt::print</h5>',13),h={href:"https://github.com/esp8266/Arduino/pull/1752",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="esp-idf平台" tabindex="-1"><a class="header-anchor" href="#esp-idf平台" aria-hidden="true">#</a> ESP-IDF平台</h2><h3 id="_0x00-新建一个工程" tabindex="-1"><a class="header-anchor" href="#_0x00-新建一个工程" aria-hidden="true">#</a> 0x00 新建一个工程</h3><p>我们需要新建一个ESP-IDF的工程，这里直接使用了<code>hello_world</code>的例程，新建过程不多赘述。</p><h3 id="_0x01-修改为c-的工程" tabindex="-1"><a class="header-anchor" href="#_0x01-修改为c-的工程" aria-hidden="true">#</a> 0x01 修改为c++的工程</h3><p>因为<code>{fmt}</code>库是基于c++的，因此我们也需要将工程修改为c++的工程才可以使用。</p><p>切换到<code>main</code>文件夹下，打开<code>CMakeLists.txt</code>文件，将<code>idf_component_register(...)</code>中的<code>SRCS &quot;main.c&quot;</code>修改为<code>SRCS &quot;main.cpp&quot;</code>。</p><h3 id="_0x02-新建fmt组件" tabindex="-1"><a class="header-anchor" href="#_0x02-新建fmt组件" aria-hidden="true">#</a> 0x02 新建fmt组件</h3><p>我们在工程的根目录下新建一个<code>components</code>文件夹，如果已经有了请忽略，然后再在<code>components</code>文件夹下新建一个<code>fmt</code>的文件夹。然后，我们在该文件夹下新建一个<code>CmakeLists.txt</code>文件。在<code>fmt</code>文件夹下，使用<code>git clone</code>命令克隆<code>{fmt}</code>项目。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/fmtlib/fmt.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>克隆完成后，我们的工程目录应该是这样子的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>│  CMakeLists.txt
│  sdkconfig
│  sdkconfig.ci
│  sdkconfig.old
│
├─build
│  └─ ...
├─components
│  └─fmt
│      │  CMakeLists.txt
│      │
│      └─fmt
│          │  ...
│
└─main
        CMakeLists.txt
        main.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_0x03-编辑cmakelists-txt文件" tabindex="-1"><a class="header-anchor" href="#_0x03-编辑cmakelists-txt文件" aria-hidden="true">#</a> 0x03 编辑CMakeLists.txt文件</h3><p>在这里，我们需要修改两个<code>CMakeLists.txt</code>文件</p><p>我们打开<code>components/fmt/CMakeLists.txt</code>文件，加入以下内容：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token function">idf_component_register</span><span class="token punctuation">(</span>
    INCLUDE_DIRS <span class="token string">&quot;fmt/include&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打开<code>main/CMakeLists.txt</code>文件，在最后一行加上：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_compile_definitions</span><span class="token punctuation">(</span>FMT_HEADER_ONLY<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一句话的作用相当于是全局定义了一个叫做<code>FMT_HEADER_ONLY</code>的宏，具体作用可以参考官方手册。</p><p>这样，我们就成功将<code>{fmt}</code>库组件加入到了我们的工程中。</p><h3 id="_0x04-编写代码并享受" tabindex="-1"><a class="header-anchor" href="#_0x04-编写代码并享受" aria-hidden="true">#</a> 0x04 编写代码并享受</h3><p>我们在<code>main.cpp</code>中加入如下代码，然后编译烧录并打开监视窗口：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sdkconfig.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/FreeRTOS.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/task.h&quot;</span></span>
<span class="token comment">// #define FMT_HEADER_ONLY</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;fmt/core.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fmt/ranges.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fmt/color.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fmt/chrono.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">void</span> <span class="token function">app_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world! \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, from fmt! \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;The answer is {}. \\n&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> fmt<span class="token double-colon punctuation">::</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;d rather be {1} than {0}.\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;right&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;happy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;{}\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fg</span><span class="token punctuation">(</span>fmt<span class="token double-colon punctuation">::</span>color<span class="token double-colon punctuation">::</span>crimson<span class="token punctuation">)</span> <span class="token operator">|</span> fmt<span class="token double-colon punctuation">::</span>emphasis<span class="token double-colon punctuation">::</span>bold<span class="token punctuation">,</span>
               <span class="token string">&quot;Hello, {}!\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fg</span><span class="token punctuation">(</span>fmt<span class="token double-colon punctuation">::</span>color<span class="token double-colon punctuation">::</span>floral_white<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">bg</span><span class="token punctuation">(</span>fmt<span class="token double-colon punctuation">::</span>color<span class="token double-colon punctuation">::</span>slate_gray<span class="token punctuation">)</span> <span class="token operator">|</span>
                   fmt<span class="token double-colon punctuation">::</span>emphasis<span class="token double-colon punctuation">::</span>underline<span class="token punctuation">,</span>
               <span class="token string">&quot;Hello, {}!\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;мир&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fg</span><span class="token punctuation">(</span>fmt<span class="token double-colon punctuation">::</span>color<span class="token double-colon punctuation">::</span>steel_blue<span class="token punctuation">)</span> <span class="token operator">|</span> fmt<span class="token double-colon punctuation">::</span>emphasis<span class="token double-colon punctuation">::</span>italic<span class="token punctuation">,</span>
               <span class="token string">&quot;Hello, {}!\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;世界&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>literals<span class="token double-colon punctuation">::</span>chrono_literals<span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Default format: {} {}\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span>s<span class="token punctuation">,</span> <span class="token number">100</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;strftime-like format: {:%H:%M:%S}\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span>h <span class="token operator">+</span> <span class="token number">15</span>min <span class="token operator">+</span> <span class="token number">30</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Restarting in {} seconds...\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> portTICK_PERIOD_MS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Restarting now.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">esp_restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察日志打印：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello world! 
Hello, from fmt! 
The answer is 42. 
I&#39;d rather be happy than right.
[1, 2, 3]
Hello, world!
Hello, мир!
Hello, 世界!
Default format: 42s 100ms
strftime-like format: 03:15:30
Restarting in 10 seconds...
Restarting in 9 seconds...
Restarting in 8 seconds...
Restarting in 7 seconds...
Restarting in 6 seconds...
Restarting in 5 seconds...
Restarting in 4 seconds...
Restarting in 3 seconds...
Restarting in 2 seconds...
Restarting in 1 seconds...
Restarting in 0 seconds...
Restarting now.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',25);function q(x,_){const a=p("ExternalLinkIcon");return c(),i("div",null,[v,l(" more "),n("p",null,[s("通过去fmtlib的"),n("a",b,[s("官网"),t(a)]),s("查看，我们不难发现，想要使用fmtlib，仅仅需要编译器支持C++11即可，如果版本不够，甚至最低只需要C++98。那么万事俱备只欠东风，让我们来尝试移植吧。")]),f,n("p",null,[n("s",null,[s("ESP8266环境下不需要进行任何操作，官方已经重定义stdout至Serial了"),n("a",h,[s("https://github.com/esp8266/Arduino/pull/1752"),t(a)])])]),g])}const R=o(m,[["render",q],["__file","index.html.vue"]]);export{R as default};
