(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{347:function(t,s,n){t.exports=n.p+"assets/img/2023-05-06-15-04-58.1d6626ff.png"},348:function(t,s,n){t.exports=n.p+"assets/img/2023-05-06-15-21-02.a5d7b9f0.png"},349:function(t,s,n){t.exports=n.p+"assets/img/2023-05-06-15-29-11.d62825fe.png"},350:function(t,s,n){t.exports=n.p+"assets/img/2023-05-06-15-29-39.b0a8c0e7.png"},351:function(t,s,n){t.exports=n.p+"assets/img/2023-05-06-15-39-02.a07e24d4.png"},372:function(t,s,n){"use strict";n.r(s);var a=n(4),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在日常的开发中，我们免不了使用各种各样的日志打印方式，使用调试器固然好用，但是无法直接打印局部变量以及会打断整个运行状态。并且对于众多"),s("code",[t._v("Arduino")]),t._v("的用户来说，直接打印日志显然是更直观的做法。但是直接使用串口打印的话需要一定的资源，并且速度会稍慢，并且可能会占用一个串口，对于资源就不多的MCU，我们有没有更方便的方法呢？\n")]),t._v(" "),s("h2",{attrs:{id:"调试方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调试方式"}},[t._v("#")]),t._v(" 调试方式")]),t._v(" "),s("h3",{attrs:{id:"使用swo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用swo"}},[t._v("#")]),t._v(" 使用SWO")]),t._v(" "),s("p",[t._v("对于这个问题，众多厂商也有着相同的需求，于是Arm公司便提出了一种叫做"),s("code",[t._v("Serial Wire Output")]),t._v("的协议，我们将其简称为"),s("code",[t._v("SWO")]),t._v("。简单来说，它是一种用于调试的接口协议。SWO是在ARM Cortex-M微控制器上实现的，它允许调试器通过单个引脚输出数据，而不需要占用其他引脚。使用SWO接口，可以在运行时输出调试信息，例如程序状态、变量值、函数返回值等，从而帮助开发人员进行调试。")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("STM32")]),t._v("微处理器的编程中，我们只需要在"),s("code",[t._v("STM32CubeMX")]),t._v("软件中打开异步跟踪模式即可使用SWO进行输出调试，相比与串口的打印，使用SWO明显效率更高，占用的引脚更少。\n"),s("img",{attrs:{src:n(347),alt:""}}),t._v("\n但是遗憾的是，采用SWO的日志输出依然会占用一个IO，并且只能和SWD/JTAG等调试口联用。那么我们有没有一种方法，可以做到只使用调试接口就可以输出日志，并且拥有相似甚至更高的效率呢？")]),t._v(" "),s("h3",{attrs:{id:"segger-rtt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#segger-rtt"}},[t._v("#")]),t._v(" SEGGER-RTT")]),t._v(" "),s("p",[t._v("在此基础上，伟大的"),s("code",[t._v("SEGGER Microcontroller")]),t._v("公司便推出了一种新的日志打印方式，称之为"),s("code",[t._v("Real-Time Transfer")]),t._v("，也就是简称的"),s("code",[t._v("RTT")]),t._v("。什么？你没听过这个公司？那你总用过"),s("code",[t._v("J-Link")]),t._v("吧，是的，它们出自于一家公司。")]),t._v(" "),s("p",[t._v("SEGGER-RTT 的原理是通过在目标设备上的专用软件库，将实时数据通过 JTAG/SWD 接口传输到 Host 端。这个过程中不需要额外的硬件支持，只需要使用 SEGGER 的调试器和它的支持的 IDE（如SEGGER's Embedded Studio或其他兼容IDE）。SEGGER-RTT 通过利用调试器的访问权限，从调试目标设备的内部缓冲区中读取数据，并将这些数据发送到 Host 端进行处理和显示。同时也可以在 Host 端向目标设备发送数据，以便执行一些控制操作或者更改程序的状态。由于 SEGGER-RTT 可以非常快速地传输大量数据，因此它通常被用于实时性要求较高的应用程序中。")]),t._v(" "),s("h2",{attrs:{id:"移植segger-rtt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移植segger-rtt"}},[t._v("#")]),t._v(" 移植SEGGER-RTT")]),t._v(" "),s("p",[t._v("我们来尝试在Air001单片机上移植SEGGER-RTT。移植好的工程开源链接：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/Air-duino/Air001-SEGGER-RTT-Keil",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/Air-duino/Air001-SEGGER-RTT-Keil"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"_0x01-安装j-link"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x01-安装j-link"}},[t._v("#")]),t._v(" 0x01 安装J-Link")]),t._v(" "),s("p",[t._v("第一步，我们先下载一个"),s("a",{attrs:{href:"https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jlink全家桶"),s("OutboundLink")],1),t._v("，然后安装。\n然后在如图所示的安装目录下，我们应该可以看到这样的一个压缩文件：\n"),s("img",{attrs:{src:n(348),alt:""}}),t._v("\n解压它，备用。")]),t._v(" "),s("h3",{attrs:{id:"_0x02-加入keil工程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x02-加入keil工程"}},[t._v("#")]),t._v(" 0x02 加入Keil工程")]),t._v(" "),s("p",[t._v("我们将"),s("code",[t._v("xxx/JLink\\Samples\\RTT\\SEGGER_RTT_V788a\\")]),t._v("下的"),s("code",[t._v("RTT")]),t._v("和"),s("code",[t._v("Config")]),t._v("文件夹复制到我们的工程目录下，并加入到Keil工程中，别忘了添加头文件。\n"),s("img",{attrs:{src:n(349),alt:""}}),t._v(" "),s("img",{attrs:{src:n(350),alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_0x03-初始化并调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x03-初始化并调用"}},[t._v("#")]),t._v(" 0x03 初始化并调用")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("main.c")]),t._v("文件中include头文件，并初始化。")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_Init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SystemClock_Config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HS_GPIO_Init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HS_USART1_UART_Init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEGGER_RTT_Init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEGGER_RTT_printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world ! \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEGGER_RTT_printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is the %dst print \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_Delay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("因为我们使用的是DAPLink，Jlink的软件无法识别，因此我们使用了一个第三方的软件：\n"),s("a",{attrs:{href:"https://github.com/XIVN1987/RTTView",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/XIVN1987/RTTView"),s("OutboundLink")],1),t._v(" "),s("img",{attrs:{src:n(351),alt:""}}),t._v("\n打印出了预期的结果。")]),t._v(" "),s("h2",{attrs:{id:"后记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[t._v("#")]),t._v(" 后记")]),t._v(" "),s("ul",[s("li",[t._v("思考：效率是否能进一步提高呢？")])])])}),[],!1,null,null,null);s.default=e.exports}}]);