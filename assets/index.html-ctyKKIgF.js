import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as p,f as l,a as n,b as s,d as e,e as t}from"./app-Ccd2B7_w.js";const r="/assets/2023-05-06-15-04-58-DpMHk8Mb.png",u="/assets/2023-05-06-15-21-02-DpbFT8xU.png",d="/assets/2023-05-06-15-29-11-DOwiQ4YX.png",k="/assets/2023-05-06-15-29-39-DvTCV4f2.png",_="/assets/2023-05-06-15-39-02-CWudQtzv.png",h={},m=n("p",null,[s("在日常的开发中，我们免不了使用各种各样的日志打印方式，使用调试器固然好用，但是无法直接打印局部变量以及会打断整个运行状态。并且对于众多"),n("code",null,"Arduino"),s("的用户来说，直接打印日志显然是更直观的做法。但是直接使用串口打印的话需要一定的资源，并且速度会稍慢，并且可能会占用一个串口，对于资源就不多的MCU，我们有没有更方便的方法呢？")],-1),b=t('<h2 id="调试方式" tabindex="-1"><a class="header-anchor" href="#调试方式" aria-hidden="true">#</a> 调试方式</h2><h3 id="使用swo" tabindex="-1"><a class="header-anchor" href="#使用swo" aria-hidden="true">#</a> 使用SWO</h3><p>对于这个问题，众多厂商也有着相同的需求，于是Arm公司便提出了一种叫做<code>Serial Wire Output</code>的协议，我们将其简称为<code>SWO</code>。简单来说，它是一种用于调试的接口协议。SWO是在ARM Cortex-M微控制器上实现的，它允许调试器通过单个引脚输出数据，而不需要占用其他引脚。使用SWO接口，可以在运行时输出调试信息，例如程序状态、变量值、函数返回值等，从而帮助开发人员进行调试。</p><p>在<code>STM32</code>微处理器的编程中，我们只需要在<code>STM32CubeMX</code>软件中打开异步跟踪模式即可使用SWO进行输出调试，相比与串口的打印，使用SWO明显效率更高，占用的引脚更少。<br><img src="'+r+'" alt="" loading="lazy"><br> 但是遗憾的是，采用SWO的日志输出依然会占用一个IO，并且只能和SWD/JTAG等调试口联用。那么我们有没有一种方法，可以做到只使用调试接口就可以输出日志，并且拥有相似甚至更高的效率呢？</p><h3 id="segger-rtt" tabindex="-1"><a class="header-anchor" href="#segger-rtt" aria-hidden="true">#</a> SEGGER-RTT</h3><p>在此基础上，伟大的<code>SEGGER Microcontroller</code>公司便推出了一种新的日志打印方式，称之为<code>Real-Time Transfer</code>，也就是简称的<code>RTT</code>。什么？你没听过这个公司？那你总用过<code>J-Link</code>吧，是的，它们出自于一家公司。</p><p>SEGGER-RTT 的原理是通过在目标设备上的专用软件库，将实时数据通过 JTAG/SWD 接口传输到 Host 端。这个过程中不需要额外的硬件支持，只需要使用 SEGGER 的调试器和它的支持的 IDE（如SEGGER&#39;s Embedded Studio或其他兼容IDE）。SEGGER-RTT 通过利用调试器的访问权限，从调试目标设备的内部缓冲区中读取数据，并将这些数据发送到 Host 端进行处理和显示。同时也可以在 Host 端向目标设备发送数据，以便执行一些控制操作或者更改程序的状态。由于 SEGGER-RTT 可以非常快速地传输大量数据，因此它通常被用于实时性要求较高的应用程序中。</p><h2 id="移植segger-rtt" tabindex="-1"><a class="header-anchor" href="#移植segger-rtt" aria-hidden="true">#</a> 移植SEGGER-RTT</h2><p>我们来尝试在Air001单片机上移植SEGGER-RTT。移植好的工程开源链接：</p>',9),T={href:"https://github.com/Air-duino/Air001-SEGGER-RTT-Keil",target:"_blank",rel:"noopener noreferrer"},v=n("h3",{id:"_0x01-安装j-link",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0x01-安装j-link","aria-hidden":"true"},"#"),s(" 0x01 安装J-Link")],-1),g={href:"https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack",target:"_blank",rel:"noopener noreferrer"},f=n("br",null,null,-1),E=n("br",null,null,-1),R=n("img",{src:u,alt:"",loading:"lazy"},null,-1),S=n("br",null,null,-1),G=t('<h3 id="_0x02-加入keil工程" tabindex="-1"><a class="header-anchor" href="#_0x02-加入keil工程" aria-hidden="true">#</a> 0x02 加入Keil工程</h3><p>我们将<code>xxx/JLink\\Samples\\RTT\\SEGGER_RTT_V788a\\</code>下的<code>RTT</code>和<code>Config</code>文件夹复制到我们的工程目录下，并加入到Keil工程中，别忘了添加头文件。<br><img src="'+d+'" alt="" loading="lazy"><br><img src="'+k+`" alt="" loading="lazy"></p><h3 id="_0x03-初始化并调用" tabindex="-1"><a class="header-anchor" href="#_0x03-初始化并调用" aria-hidden="true">#</a> 0x03 初始化并调用</h3><p>在<code>main.c</code>文件中include头文件，并初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HS_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HS_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SEGGER_RTT_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SEGGER_RTT_printf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello world ! \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">SEGGER_RTT_printf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;This is the %dst print \\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),x=n("br",null,null,-1),w={href:"https://github.com/XIVN1987/RTTView",target:"_blank",rel:"noopener noreferrer"},A=n("br",null,null,-1),I=n("img",{src:_,alt:"",loading:"lazy"},null,-1),y=n("br",null,null,-1),D=n("h2",{id:"后记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#后记","aria-hidden":"true"},"#"),s(" 后记")],-1),O=n("ul",null,[n("li",null,"思考：效率是否能进一步提高呢？")],-1);function V(W,C){const a=c("ExternalLinkIcon");return i(),p("div",null,[m,l(" more "),b,n("p",null,[n("a",T,[s("https://github.com/Air-duino/Air001-SEGGER-RTT-Keil"),e(a)])]),v,n("p",null,[s("第一步，我们先下载一个"),n("a",g,[s("Jlink全家桶"),e(a)]),s("，然后安装。"),f,s(" 然后在如图所示的安装目录下，我们应该可以看到这样的一个压缩文件："),E,R,S,s(" 解压它，备用。")]),G,n("p",null,[s("因为我们使用的是DAPLink，Jlink的软件无法识别，因此我们使用了一个第三方的软件："),x,n("a",w,[s("https://github.com/XIVN1987/RTTView"),e(a)]),A,I,y,s(" 打印出了预期的结果。")]),D,O])}const M=o(h,[["render",V],["__file","index.html.vue"]]);export{M as default};
