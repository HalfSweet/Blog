import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as n,c as d,f as t,a,b as e,d as r,e as s}from"./app-CyNvHrTn.js";const p="/assets/2023-08-27-20-49-48-BcktpWcB.png",l="/assets/2023-08-27-20-50-31-BKN8eE3k.png",g="/assets/2023-08-27-20-54-34-CGv3oeYt.png",h="/assets/2023-08-27-20-56-40-9Qb5jVKj.png",f="/assets/2023-08-27-20-56-55-u0KwFhz_.png",m="/assets/2023-08-27-21-00-57-CNv6tgKB.png",u="/assets/2023-09-01-22-19-35-D43g3qmC.png",b="/assets/2023-09-01-22-25-42-CLAhyCNu.png",_="/assets/2023-09-01-22-30-07-CxeyCwt5.png",C={},x=a("p",null,"在上几篇文章中，我们将 HAL 库移植给了 Air32，但是我们的开发环境还是使用的 Keil，这样就会导致一些问题，比如 Keil 的代码提示不够友好，而且 Keil 的代码补全也不够完善，因此我们可以使用一个更好的开发环境，比如 Clion。",-1),v=s('<div class="hint-container note"><p class="hint-container-title">注</p><p>本文如没有特殊说明，均以 Clion 的新 UI 为例</p></div><h2 id="前置条件" tabindex="-1"><a class="header-anchor" href="#前置条件" aria-hidden="true">#</a> 前置条件</h2><ol><li>需要 Clio 你软件（废话</li><li>需要安装<code>arm-none-eabi-gcc</code>，windows 用户建议通过<code>MSYS2</code>的包管理工具安装，在此不多赘述</li><li>我们推荐使用<code>PyOCD</code>作为调试器</li><li>安装<code>STM32CubeMX</code>生成工程模板，当然这一步不是必须的，你也可以用我们文末提供的模板</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>MinGW 和 Cmake 工具链目前最新版的 Clion 自带，我们无需在意</p></div><h2 id="新建工程" tabindex="-1"><a class="header-anchor" href="#新建工程" aria-hidden="true">#</a> 新建工程</h2><p>打开 Clion 软件，点击左上角的<code>☰-文件-新建-项目</code>按钮</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择左边<code>嵌入式</code>列表中的<code>STM32CubeMX</code>，路径自定</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择<code>在 STM32CubeMX 中打开</code></p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>默认采用了<code>STM32F030F4Px</code>，点击顶上面包屑导航的<code>STM32F030F4P6</code>修改为<code>STM32F103CBTx</code></p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击<code>Start Project</code>，进入配置界面</p><p>接下来是常规配置，可以参考 [发挥全部实力！Air32 在 HAL 库环境下运行最高主频](./发挥全部实力！Air32 在 HAL 库环境下运行最高主频。md) 中的配置，这里不再赘述</p><h2 id="生成代码" tabindex="-1"><a class="header-anchor" href="#生成代码" aria-hidden="true">#</a> 生成代码</h2><p>生成代码的时候，在<code>Project Manage</code>中的<code>Toolchain / IDE</code>中选择<code>STM32CubeIDE</code>，注意检查路径是否正确</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击右上角的<code>Generate Code</code>按钮，等待生成完成</p><h2 id="生成-cmake-工程" tabindex="-1"><a class="header-anchor" href="#生成-cmake-工程" aria-hidden="true">#</a> 生成 Cmake 工程</h2><p>回到 Clion 中，打开<code>.ioc</code>目录下的工程，会自动生成 Cmake 工程，我们点击一下<code>构建</code>按钮，此时应该可以自动编译完成。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>记得安装<code>arm-none-eabi-gcc</code>环境</p></div><h2 id="下载工程" tabindex="-1"><a class="header-anchor" href="#下载工程" aria-hidden="true">#</a> 下载工程</h2><p>我们使用<code>pyOCD</code>下载，首先我们需要安装<code>pyOCD</code>的环境，这里我们选择安装<code>develop</code>版本，因为目前内置 Air32 的版本还没正式发布。</p><p>在我们有 Python 环境的前提下，只需要</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">--pre</span> <span class="token parameter variable">-U</span> git+https://github.com/pyocd/pyOCD.git@develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>即可安装。</p><p>接下来我们需要配置运行参数，我们点击上方的<code>运行/调试配置</code>按钮，然后点击<code>编辑配置</code>。</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可执行文件中，修改为<code>pyOCD</code>的路径，如果找不到可以用<code>which pyocd</code>命令查看。</p><p>命令实参中，加入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flash <span class="token parameter variable">--erase</span> chip <span class="token parameter variable">--target</span> air32f103xb <span class="token variable">$CMakeCurrentBuildDir</span>$/Air32F103_Clion.hex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>芯片型号和具体的 hex 文件可以根据实际情况进行修改。</p><p>此时点击<code>运行</code>按钮，即可下载程序到 Air32 中。</p><h2 id="配置调试器" tabindex="-1"><a class="header-anchor" href="#配置调试器" aria-hidden="true">#</a> 配置调试器</h2><p>点击<code>运行/调试配置</code>按钮，然后点击<code>编辑配置</code>，点击弹出窗口的左上角的<code>+</code>按钮，选择<code>嵌入式 GDB 调试器</code></p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>target remote</code>中填入<code>localhost:65533</code>，或者端口自定，不冲突即可。</p><p><code>GDB 服务器</code>中填入 pyOCD 的可执行文件路径</p><p><code>GDB 服务器实参</code>中填入<code>gdbserver -p 65533 -t air32f103xb -f 10M</code>，端口号和芯片型号自定，如果连不上可适当降低频率。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后点击确认即可</p><p>把运行配置切换到刚才设置的调试选项卡中，点击<code>调试</code>按钮即可进行调试</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2>',45),y={href:"https://github.com/Air-duino/Air32-Clion-Template",target:"_blank",rel:"noopener noreferrer"};function k(M,A){const i=c("ExternalLinkIcon");return n(),d("div",null,[x,t(" more "),v,a("p",null,[e("此工程开源在"),a("a",y,[e("https://github.com/Air-duino/Air32-Clion-Template"),r(i)]),e("上")])])}const T=o(C,[["render",k],["__file","index.html.vue"]]);export{T as default};
