import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as c,c as i,a as s,b as n,d as p,w as l,f as u,e as r}from"./app-BlUsxm1s.js";const k="/assets/2023-08-20-23-11-24-ZMzPBXQb.png",C={},_=s("code",null,"MCO",-1),d=r('<h2 id="关于" tabindex="-1"><a class="header-anchor" href="#关于" aria-hidden="true">#</a> 关于</h2><p>MCO 全称为<code>Microcontroller clock output</code>，即微控制器时钟输出，它可以将主时钟输出到某个引脚上，这样我们就可以在不消耗任何资源的情况下得到一些特定的时钟信号。</p><p>在 STM32F103 中，MCO 对于 PLL 的输出有两种选择，分别是 PLL/2 和 PLL/3，但是这对于主频高达 256M 的 Air32 来说显然是不够的，因为其 GPIO 输出最大仅 50M。因此 Air32 有了专属的一个寄存器来控制 MCO 的输出，这个寄存器就是<code>RCC_MCO_VAL</code>，其相对 RCC 的偏移量为<code>0x30</code>。</p><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="添加寄存器地址" tabindex="-1"><a class="header-anchor" href="#添加寄存器地址" aria-hidden="true">#</a> 添加寄存器地址</h2><p>因为这个寄存器是 Air32 独有的，因此我们需要单独添加。我们在芯片的头文件中的<code>RCC_TypeDef</code>结构体中进行添加，我们此处以<code>air32f103xb.h</code>为例，添加的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
  __IO <span class="token class-name">uint32_t</span> CR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> CFGR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> CIR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> APB2RSTR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> APB1RSTR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> AHBENR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> APB2ENR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> APB1ENR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> BDCR<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> CSR<span class="token punctuation">;</span>

  __IO <span class="token class-name">uint32_t</span> RCC_RSVD1<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> RCC_MCO_VAL<span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> RCC_RSVD2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0xF0</span><span class="token operator">-</span><span class="token number">0x34</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  __IO <span class="token class-name">uint32_t</span> RCC_SYSCFG_CONFIG<span class="token punctuation">;</span>

<span class="token punctuation">}</span> RCC_TypeDef<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加-rcc-mco-val-的定义" tabindex="-1"><a class="header-anchor" href="#添加-rcc-mco-val-的定义" aria-hidden="true">#</a> 添加 RCC_MCO_VAL 的定义</h2><p>同样，我们需要添加 RCC_MCO_VAL 的具体内容，同样在<code>air32f103xb.h</code>中添加，为了兼容性，我们选择高位和<code>RCC_CFGR_MCO_PLLCLK_DIV2</code>一致，即<code>0x07000000U</code>，而最后一位即为实际的定义，因此我们添加的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV2</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000001U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV3</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000002U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV4</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000003U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV5</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000004U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV6</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000005U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV7</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000006U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV8</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000007U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV9</span>                  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000008U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV10</span>                 <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00000009U</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV11</span>                 <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0000000AU</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV12</span>                 <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0000000BU</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV13</span>                 <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0000000CU</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV14</span>                 <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0000000DU</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV15</span>                 <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0000000EU</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO_PLLCLK_DIV16</span>                 <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0000000FU</span> <span class="token operator">|</span> RCC_CFGR_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改-is-rcc-mco1source-宏定义" tabindex="-1"><a class="header-anchor" href="#修改-is-rcc-mco1source-宏定义" aria-hidden="true">#</a> 修改 IS_RCC_MCO1SOURCE 宏定义</h2><p><code>IS_RCC_MCO1SOURCE</code>宏的作用是检测参数是否合法，我们添加了一些参数，因此我们需要修改这个宏，我们修改后的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IS_RCC_MCO1SOURCE</span><span class="token expression"><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_SYSCLK<span class="token punctuation">)</span>  <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_HSI<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_HSE<span class="token punctuation">)</span>     <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_NOCLOCK<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV3<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV4<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV5<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV6<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV7<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV8<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV9<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV10<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV11<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV12<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV13<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV14<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV15<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
                                    <span class="token expression"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV16<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__SOURCE__<span class="token punctuation">)</span> <span class="token operator">==</span> RCC_MCO1SOURCE_PLLCLK_DIV2<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加-mco1-clock-source-相关宏定义" tabindex="-1"><a class="header-anchor" href="#添加-mco1-clock-source-相关宏定义" aria-hidden="true">#</a> 添加 MCO1 Clock Source 相关宏定义</h2><p>在<code>air32_hal_rcc_ex.h</code>中，我们还需要补全相关宏定义，以便于和原来的风格相似，我们添加如下代码</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV2</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV3</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV3<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV4</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV4<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV5</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV5<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV6</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV6<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV7</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV7<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV8</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV8<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV9</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV9<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV10</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV10<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV11</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV11<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV12</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV12<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV13</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV13<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV14</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV14<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV15</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV15<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RCC_MCO1SOURCE_PLLCLK_DIV16</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>RCC_MCO_PLLCLK_DIV16<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改-hal-rcc-mcoconfig-函数" tabindex="-1"><a class="header-anchor" href="#修改-hal-rcc-mcoconfig-函数" aria-hidden="true">#</a> 修改 HAL_RCC_MCOConfig 函数</h2><p>最后，我们需要对原有的<code>HAL_RCC_MCOConfig</code>函数进行修改，使其能够适配 Air32，我们修改后的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">HAL_RCC_MCOConfig</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> RCC_MCOx<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> RCC_MCOSource<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> RCC_MCODiv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  GPIO_InitTypeDef gpio <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0U</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">/* Check the parameters */</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_RCC_MCO</span><span class="token punctuation">(</span>RCC_MCOx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_RCC_MCODIV</span><span class="token punctuation">(</span>RCC_MCODiv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_RCC_MCO1SOURCE</span><span class="token punctuation">(</span>RCC_MCOSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Prevent unused argument(s) compilation warning */</span>
  <span class="token function">UNUSED</span><span class="token punctuation">(</span>RCC_MCOx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">UNUSED</span><span class="token punctuation">(</span>RCC_MCODiv<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Configure the MCO1 pin in alternate function mode */</span>
  gpio<span class="token punctuation">.</span>Mode      <span class="token operator">=</span> GPIO_MODE_AF_PP<span class="token punctuation">;</span>
  gpio<span class="token punctuation">.</span>Speed     <span class="token operator">=</span> GPIO_SPEED_FREQ_HIGH<span class="token punctuation">;</span>
  gpio<span class="token punctuation">.</span>Pull      <span class="token operator">=</span> GPIO_NOPULL<span class="token punctuation">;</span>
  gpio<span class="token punctuation">.</span>Pin       <span class="token operator">=</span> MCO1_PIN<span class="token punctuation">;</span>

  <span class="token comment">/* MCO1 Clock Enable */</span>
  <span class="token function">MCO1_CLK_ENABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">HAL_GPIO_Init</span><span class="token punctuation">(</span>MCO1_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gpio<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Configure the MCO clock source */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>RCC_MCOSource <span class="token operator">&lt;=</span> RCC_MCO1SOURCE_PLLCLK<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">__HAL_RCC_MCO1_CONFIG</span><span class="token punctuation">(</span>RCC_MCOSource<span class="token punctuation">,</span> RCC_MCODiv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">__HAL_RCC_MCO1_CONFIG</span><span class="token punctuation">(</span>RCC_MCO1SOURCE_PLLCLK<span class="token punctuation">,</span> RCC_MCODiv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    RCC<span class="token operator">-&gt;</span>RCC_MCO_VAL <span class="token operator">=</span> <span class="token punctuation">(</span>RCC_MCOSource <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就完成了对 MCO 的添加，接下来我们就可以在 HAL 库中使用 MCO 了。我们只需要调用<code>HAL_RCC_MCOConfig</code>即可使用 MCO 输出，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">HAL_RCC_MCOConfig</span><span class="token punctuation">(</span>RCC_MCO1<span class="token punctuation">,</span> RCC_MCO1SOURCE_PLLCLK_DIV16<span class="token punctuation">,</span> RCC_MCODIV_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>即可以 16 分频输出 PLL 的时钟信号。</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2>`,23),m={href:"https://github.com/Air-duino/Air32F103-HAL-RCC",target:"_blank",rel:"noopener noreferrer"};function v(L,O){const e=a("RouterLink"),t=a("ExternalLinkIcon");return c(),i("div",null,[s("p",null,[n("在 "),p(e,{to:"/posts/Air32-HAL-HighFreq/"},{default:l(()=>[n("上篇文章")]),_:1}),n(" 中，我们把 HAL 库移植给了 Air32，那现在让我们尝试添加一些 HAL 库特有的功能吧，比如这篇文章中描述的"),_,n("。")]),u(" more "),d,s("p",null,[n("测试的代码可以参考"),s("a",m,[n("https://github.com/Air-duino/Air32F103-HAL-RCC"),p(t)])])])}const M=o(C,[["render",v],["__file","index.html.vue"]]);export{M as default};
