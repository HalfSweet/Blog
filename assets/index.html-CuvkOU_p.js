import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-DXDMdZ_4.js";const l="/assets/2023-04-14-18-22-04-DRWvG1kO.png",h="/assets/2023-04-14-18-48-04-CPqcUbM7.png",t="/assets/2023-04-14-18-48-21-Df5ecIHT.png",k={};function p(r,i){return e(),a("div",null,i[0]||(i[0]=[n(`<p>最近维护的 Air001 准备上线了，为了衬托出其强大的性价比，因此我想来做点<s>缺德</s>的事，让我们来和同样以高打性价比的 STC 系列单片机来对比下 CoreMark 的跑分吧，本文将会详细介绍移植过程以及跑分结果。测试的 MCU 为<code>降龙棍 STC32G12K128</code>与<code>打狗棒 STC8H8K64U</code>。</p><p>通用，本文同样适用于 Arm-Cortex M 架构的 MCU。</p><h2 id="stc32g12k128" tabindex="-1"><a class="header-anchor" href="#stc32g12k128"><span>STC32G12K128</span></a></h2><h3 id="开启-usb-cdc-打印-log" tabindex="-1"><a class="header-anchor" href="#开启-usb-cdc-打印-log"><span>开启 USB-CDC 打印 Log</span></a></h3><p>我买到的降龙棍开发板非常的 HiFi，整个板子上外设除了 LED 和芯片就没什么了，下载程序都是用的自带的 USB-HID 的 bootloader，然后我又懒得接一个串口模块，因此我们可不可以利用原生的 USB，走 CDC 虚拟串口来打印跑分后的数据呢？</p><p>答案当然是肯定的，STC 非常的贴心，自带了一个写好的 USB 库，其中包含了 HID 和 CDC 两类主要的操作。那我们就先尝试去移植吧。</p><h4 id="下载库文件" tabindex="-1"><a class="header-anchor" href="#下载库文件"><span>下载库文件</span></a></h4><p>STC 的 USB 库文件下载链接为<a href="https://stcai.com/filedownload/656048" target="_blank" rel="noopener noreferrer">https://stcai.com/filedownload/656048</a>，下载后会发现是一个压缩文件，我们将其解压备用。</p><h4 id="创建工程" tabindex="-1"><a class="header-anchor" href="#创建工程"><span>创建工程</span></a></h4><p>打开 Keil，新建一个工程，芯片选择<code>STC32G12K128</code>，然后我们复制刚才解压的文件中的<code>stc32_stc8_usb.h</code>和<code>stc_usb_cdc_32g.lib</code>到我们新建的工程的目录下，并添加进自己的工程中。</p><h4 id="编写初始化代码" tabindex="-1"><a class="header-anchor" href="#编写初始化代码"><span>编写初始化代码</span></a></h4><p>我们在 main.c 中添加如下的代码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stc32g.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stc32_stc8_usb.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;STC32G_Delay.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">USER_DEVICEDESC </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">USER_PRODUCTDESC </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">USER_STCISPCMD </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@STCISP#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不停电自动 ISP 下载命令</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CDC_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> helloStr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\r\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    CDC_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    IE2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 使能 USB 中断</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    EA </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (DeviceState </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DEVSTATE_CONFIGURED)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 等待 USB 完成配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        USB_SendData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((BYTE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)helloStr, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(helloStr));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        delay_ms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CDC_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    P_SW2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    P3M0 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ~</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">03</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // P3.0/P3.1 和 USB 的 D-/D+共用 PIN 脚，</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    P3M1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">03</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 需要将 P3.0/P3.1 设置为高阻输入模式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    IRC48MCR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 使能内部 48M 的 USB 专用 IRC</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(IRC48MCR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    USBCLK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设置 USB 时钟源为内部 48M 的 USB 专用 IRC</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    USBCON </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 使能 USB 功能</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    usb_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 调用 USB CDC 初始化库函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可能需要注意的是，您需要修改 keil 中的<code>Memory Mode</code>，将其修改为<code>XSmall</code>，<code>Code ROM Size</code>修改为<code>Large</code></p></div><p><img src="`+l+'" alt=""></p><p>然后编译，发现 0 Warning，0 Error，我们下载之后打开串口助手，此时应该能看到每隔 1s 打印一次<code>Hello World!</code>。</p><h3 id="移植-coremark" tabindex="-1"><a class="header-anchor" href="#移植-coremark"><span>移植 CoreMark</span></a></h3><h4 id="下载-coremark-库" tabindex="-1"><a class="header-anchor" href="#下载-coremark-库"><span>下载 CoreMark 库</span></a></h4><p>我们在工程目录下克隆整个仓库</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/eembc/coremark.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="在-keil-中加入所需的文件" tabindex="-1"><a class="header-anchor" href="#在-keil-中加入所需的文件"><span>在 Keil 中加入所需的文件</span></a></h4><p>在工程中，加入如下几个文件：<code>core_list_join.c</code> <code>core_main.c</code> <code>core_matrix.c</code> <code>core_state.c</code> <code>core_util.c</code> s<code>simple/core_portme.c</code>，不要忘记把添加 include 路径 <img src="'+h+'" alt=""><img src="'+t+`" alt=""></p><h4 id="修改-coremark-的具体实现函数" tabindex="-1"><a class="header-anchor" href="#修改-coremark-的具体实现函数"><span>修改 CoreMark 的具体实现函数</span></a></h4><h5 id="_0x01-修改-coremark-的-main-函数" tabindex="-1"><a class="header-anchor" href="#_0x01-修改-coremark-的-main-函数"><span>0x01 修改 coremark 的 main 函数</span></a></h5><p>首先打开<code>core_main.c</code>文件，将里面的<code>MAIN_RETURN_TYPE main(int argc, char *argv[])</code>函数重命名为</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MAIN_HAS_NOARGC</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MAIN_RETURN_TYPE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">coremark_main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   argc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MAIN_RETURN_TYPE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">coremark_main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在<code>coremark.h</code>中添加</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MAIN_HAS_NOARGC</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MAIN_RETURN_TYPE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">coremark_main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MAIN_RETURN_TYPE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">coremark_main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数声明，这里是为了解决 main 函数重复的问题，而我们想要在运行正式的程序之前初始化一些我们自己的外设。</p><h5 id="_0x02-添加ee-printf函数" tabindex="-1"><a class="header-anchor" href="#_0x02-添加ee-printf函数"><span>0x02 添加<code>ee_printf</code>函数</span></a></h5><p>这里我们没法直接使用 printf 函数输出，因此选择自己写一个<code>ee_printf</code>函数将运行结果输出。我们打开<code>core_portme.h</code>文件，将<code>HAS_PRINTF</code>的值设定为 0，并在文件末尾添加<code>ee_printf</code>的函数定义。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#ifndef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HAS_PRINTF</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HAS_PRINTF</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ee_printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后我们在<code>simple</code>文件夹下新建一个<code>ee_printf.c</code>文件，在里面写上<code>ee_printf</code>函数的定义。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;coremark.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stdio.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stc32_stc8_usb.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdarg.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ee_printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    va_list args;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    va_start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args, fmt);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vsprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buf, fmt, args);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    va_end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    USB_SendData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((BYTE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)buf, len);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_0x03-添加时钟" tabindex="-1"><a class="header-anchor" href="#_0x03-添加时钟"><span>0x03 添加时钟</span></a></h5><p>接下来我们需要一个时钟源来判断程序运行了多久，显然这很容易。我们采用定时器 0 作为时钟源，1ms 中断一次来进行计数。我们将引入 STC 标准库中的<code>STC32G_Timer</code>与<code>STC32G_NVIC</code>，如何添加到工程中不多赘述，初始化等操作也不多赘述，具体可以自行到仓库中查看源代码。此处我们只需要指定，每经过 1ms，SysTickFlag 将会自增 1 即可。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要注意，请记得在<code>STC32G_Timer_Isr.c</code>中修改中断函数</p></div><p>同样的，在<code>core_portme.h</code>文件中，将<code>HAS_TIME_H</code>和<code>USE_CLOCK</code>的宏定义修改为 0，并注释掉<code>#include &lt;time.h&gt;</code>，将<code>CORE_TICKS</code>的类型修改为<code>long</code>。</p><p>然后我们进入到<code>simple/core_portme.c</code>文件中，重点重写<code>GETMYTIME</code>等几个宏，我们将其注释，并替换为如下的代码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Type_def.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> volatile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> u32 SysTickFlag;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NSECS_PER_SEC</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">              1000</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CORETIMETYPE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">               long</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GETMYTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)              (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">_t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SysTickFlag)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MYTIMEDIFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ini</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)       ((fin) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ini))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TIMER_RES_DIVIDER</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SAMPLE_TIME_IMPLEMENTATION</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EE_TICKS_PER_SEC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">           (NSECS_PER_SEC </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TIMER_RES_DIVIDER)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请注意，这时候编译器可能会有很多报错，是因为和关键字重复了，建议查看 commit 记录查看修改了什么</p></div><h4 id="烧录" tabindex="-1"><a class="header-anchor" href="#烧录"><span>烧录</span></a></h4><p>使用 STC-ISP 软件烧录，其中 IRC 频率修改为最高 35M，等待烧录后打开串口查看跑分结果。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>STC32 的 CoreMark 跑分工程开源仓库为<a href="https://github.com/HalfSweet/STC32G-CoreMark" target="_blank" rel="noopener noreferrer">https://github.com/HalfSweet/STC32G-CoreMark</a></p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>目前的工程只能出现跑分的时间，CRC 校验不通过。如果有修复的方法欢迎在评论区或者仓库提出 QwQ。</p></div>`,46)]))}const A=s(k,[["render",p],["__file","index.html.vue"]]),g=JSON.parse(`{"path":"/posts/STC_CoreMark/","title":"不服来跑个分？将 CoreMark 移植到 STC 上试试","lang":"zh-CN","frontmatter":{"title":"不服来跑个分？将 CoreMark 移植到 STC 上试试","date":"2023-04-14T17:39:36.000Z","permalink":"/posts/STC_CoreMark/","category":["单片机"],"tag":["STC32","STC8","嵌入式","CoreMark"],"author":{"name":"HalfSweet","link":"https://github.com/HalfSweet"},"description":"最近维护的 Air001 准备上线了，为了衬托出其强大的性价比，因此我想来做点的事，让我们来和同样以高打性价比的 STC 系列单片机来对比下 CoreMark 的跑分吧，本文将会详细介绍移植过程以及跑分结果。测试的 MCU 为降龙棍 STC32G12K128与打狗棒 STC8H8K64U。 通用，本文同样适用于 Arm-Cortex M 架构的 MCU。","head":[["meta",{"property":"og:url","content":"https://halfsweet.cn/posts/STC_CoreMark/"}],["meta",{"property":"og:site_name","content":"HalfSweet's Blog"}],["meta",{"property":"og:title","content":"不服来跑个分？将 CoreMark 移植到 STC 上试试"}],["meta",{"property":"og:description","content":"最近维护的 Air001 准备上线了，为了衬托出其强大的性价比，因此我想来做点的事，让我们来和同样以高打性价比的 STC 系列单片机来对比下 CoreMark 的跑分吧，本文将会详细介绍移植过程以及跑分结果。测试的 MCU 为降龙棍 STC32G12K128与打狗棒 STC8H8K64U。 通用，本文同样适用于 Arm-Cortex M 架构的 MCU。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T06:35:02.000Z"}],["meta",{"property":"article:author","content":"HalfSweet"}],["meta",{"property":"article:tag","content":"STC32"}],["meta",{"property":"article:tag","content":"STC8"}],["meta",{"property":"article:tag","content":"嵌入式"}],["meta",{"property":"article:tag","content":"CoreMark"}],["meta",{"property":"article:published_time","content":"2023-04-14T17:39:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-23T06:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"不服来跑个分？将 CoreMark 移植到 STC 上试试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-14T17:39:36.000Z\\",\\"dateModified\\":\\"2024-03-23T06:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HalfSweet\\",\\"link\\":\\"https://github.com/HalfSweet\\"}]}"]]},"headers":[{"level":2,"title":"STC32G12K128","slug":"stc32g12k128","link":"#stc32g12k128","children":[{"level":3,"title":"开启 USB-CDC 打印 Log","slug":"开启-usb-cdc-打印-log","link":"#开启-usb-cdc-打印-log","children":[]},{"level":3,"title":"移植 CoreMark","slug":"移植-coremark","link":"#移植-coremark","children":[]}]}],"git":{"createdTime":1681477381000,"updatedTime":1711175702000,"contributors":[{"name":"HalfSweet","username":"HalfSweet","email":"halfsweet@halfsweet.cn","commits":4,"url":"https://github.com/HalfSweet"},{"name":"HalfSweet","username":"HalfSweet","email":"HalfSweet@HalfSweet.cn","commits":2,"url":"https://github.com/HalfSweet"}]},"readingTime":{"minutes":4.64,"words":1391},"filePathRelative":"posts/不服来跑个分？将CoreMark移植到STC上试试.md","localizedDate":"2023年4月14日","excerpt":"<p>最近维护的 Air001 准备上线了，为了衬托出其强大的性价比，因此我想来做点<s>缺德</s>的事，让我们来和同样以高打性价比的 STC 系列单片机来对比下 CoreMark 的跑分吧，本文将会详细介绍移植过程以及跑分结果。测试的 MCU 为<code>降龙棍 STC32G12K128</code>与<code>打狗棒 STC8H8K64U</code>。</p>\\n<p>通用，本文同样适用于 Arm-Cortex M 架构的 MCU。</p>\\n","autoDesc":true}`);export{A as comp,g as data};
